"use strict";(self.webpackChunkespresso=self.webpackChunkespresso||[]).push([[771],{2424:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return d},default:function(){return h},frontMatter:function(){return r},metadata:function(){return c},toc:function(){return m}});var o=t(7462),s=t(3366),i=(t(7294),t(3905)),a=t(614),l="&projwfc\n    outdir       = './tmp/'\n    prefix       = 'silicon'\n    ngauss       = 0\n    degauss      = 0.036748\n    DeltaE       = 0.005\n    kresolveddos = .true.\n    filpdos      = 'silicon.k'\n/\n",p=["components"],r={title:"k-resolved DOS",keywords:["Density of States"]},d=void 0,c={unversionedId:"hands-on/kpdos",id:"hands-on/kpdos",title:"k-resolved DOS",description:"Here we will calculate k-resolved density of states for silicon. First we begin",source:"@site/docs/hands-on/kpdos.mdx",sourceDirName:"hands-on",slug:"/hands-on/kpdos",permalink:"/espresso/hands-on/kpdos",draft:!1,editUrl:"https://github.com/pranabdas/espresso/blob/main/docs/hands-on/kpdos.mdx",tags:[],version:"current",frontMatter:{title:"k-resolved DOS",keywords:["Density of States"]},sidebar:"docs",previous:{title:"P-DOS",permalink:"/espresso/hands-on/pdos"},next:{title:"Graphene",permalink:"/espresso/hands-on/graphene"}},u={},m=[],k={toc:m},f="wrapper";function h(e){var n=e.components,r=(0,s.Z)(e,p);return(0,i.kt)(f,(0,o.Z)({},k,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Here we will calculate k-resolved density of states for silicon. First we begin\nwith self consistent field calculation. Here is the input:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"pw.x -inp si_scf.in > si_scf.out\n")),(0,i.kt)("p",null,"Followed by the bands calculation. Note that for bands calculation I have\ndoubled the number of k-points compared to our previous bands calculation."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"pw.x -inp si_bands.in > si_bands.out\n")),(0,i.kt)("p",null,"Calculate the orbital projections with k-resolved information:"),(0,i.kt)(a.Z,{language:"bash",title:"src/silicon/si_projwfc.in",showLineNumbers:!0,mdxType:"CodeBlock"},l),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"projwfc.x -inp si_projwfc.in > si_projwfc.out\n")),(0,i.kt)("p",null,"This will give separate orbital projections, as well as total sum for k-resolved\nDOS. Make plots:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="notebooks/silicon-kpdos.ipynb" showLineNumbers',title:'"notebooks/silicon-kpdos.ipynb"',showLineNumbers:!0},"import matplotlib.pyplot as plt\nfrom matplotlib import rcParamsDefault\nimport numpy as np\nimport zipfile\n%matplotlib inline\n\n# data file was compressed to reduce file size\nzipobj = zipfile.ZipFile('../src/silicon/silicon.k.pdos_tot.zip', 'r')\nzipdata = zipobj.open('silicon.k.pdos_tot')\ndata = np.loadtxt(zipdata)\n\nk = np.unique(data[:, 0])  # k values\ne = np.unique(data[:, 1])  # dos energy values\n\ndos = np.zeros([len(k), len(e)])\n\nfor i in range(len(data)):\n    e_index = int(i % len(e))\n    k_index = int(data[i][0] - 1)\n    dos[k_index, e_index] = data[i][2]\n\nplt.pcolormesh(k, e, dos.T, cmap='magma', shading='auto')\n# plt.ylim(-2, 10)\nplt.xticks([])\nplt.ylabel('Energy (eV)')\nplt.xticks([])\nplt.gcf().text(0.12, 0.06, 'L', fontsize=16, fontweight='normal')\nplt.gcf().text(0.29, 0.06, '$\\Gamma$', fontsize=16, fontweight='normal')\nplt.gcf().text(0.55, 0.06, 'X', fontsize=16, fontweight='normal')\nplt.gcf().text(0.63, 0.06, 'U', fontsize=16, fontweight='normal')\nplt.gcf().text(0.892, 0.06, '$\\Gamma$', fontsize=16, fontweight='normal')\nplt.axvline(21, c='yellow', lw=1, alpha=0.5)\nplt.axvline(51, c='yellow', lw=1, alpha=0.5)\nplt.axvline(61, c='yellow', lw=1, alpha=0.5)\nplt.show()\n")),(0,i.kt)("picture",null,(0,i.kt)("source",{type:"image/webp",srcSet:t(9736).Z}),(0,i.kt)("img",{src:t(3042).Z,alt:"silicon-kpdos"})),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"If you are using ",(0,i.kt)("inlineCode",{parentName:"p"},"ibrav=0"),", you can calculate ",(0,i.kt)("inlineCode",{parentName:"p"},"projwfc")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"lsym=.false."),"\noption.")),(0,i.kt)("p",null,"If we have contribution from multiple orbitals, we can sum desired projections\nusing ",(0,i.kt)("inlineCode",{parentName:"p"},"sumpdos.x")," program. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sumpdos.x *\\(Cl\\)*\\(p\\) > Cl_2p_tot.dat\n")),(0,i.kt)("p",null,"This way we can plot different orbital projections along with energy and\nk-resolution."))}h.isMDXComponent=!0},3042:function(e,n,t){n.Z=t.p+"assets/images/silicon-kpdos-b2754c293a6015dc188488084104f6e7.png"},9736:function(e,n,t){n.Z=t.p+"assets/images/silicon-kpdos-b66d3c028fb8a161bda92596c58e9cf3.webp"}}]);