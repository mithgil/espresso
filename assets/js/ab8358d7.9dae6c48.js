"use strict";(self.webpackChunkespresso=self.webpackChunkespresso||[]).push([[69],{8544:function(n,a,e){e.r(a),e.d(a,{assets:function(){return k},contentTitle:function(){return d},default:function(){return y},frontMatter:function(){return u},metadata:function(){return h},toc:function(){return f}});var t=e(7462),o=e(3366),s=(e(7294),e(3905)),i=e(814),r="&control\n  calculation = 'scf'\n  prefix = 'GaAs'\n  pseudo_dir = '../pseudos/'\n  outdir = './tmp/'\n  verbosity = 'high'\n  wf_collect = .true.\n/\n\n&system\n  ibrav = 2\n  celldm(1) = 10.861462\n  nat = 2\n  ntyp = 2\n  ecutwfc = 80\n  ecutrho = 640\n/\n\n&electrons\n  mixing_mode = 'plain'\n  mixing_beta = 0.7\n  conv_thr = 1.0e-8\n/\n\nATOMIC_SPECIES\n  Ga 69.723    Ga.pbe-dn-kjpaw_psl.1.0.0.UPF\n  As 74.921595 As.nc.z_15.oncvpsp3.dojo.v4-std.upf\n\nATOMIC_POSITIONS\n  Ga 0.00 0.00 0.00\n  As 0.25 0.25 0.25\n\nK_POINTS {automatic}\n  8 8 8 0 0 0\n",p="&INPUTPH\n  outdir = './tmp/'\n  prefix = 'GaAs'\n  tr2_ph = 1d-14\n  ldisp = .true.\n!  recover = .true.\n  nq1 = 6\n  nq2 = 6\n  nq3 = 6\n  fildyn = 'GaAs.dyn'\n/\n",l="&INPUT\n  fildyn = 'GaAs.dyn'\n  zasr = 'crystal'\n  flfrc = 'GaAs.fc'\n/\n",m="&INPUT\n  asr = 'crystal'\n  flfrc = 'GaAs.fc'\n  flfrq = 'GaAs.freq'\n  flvec = 'GaAs.modes'\n!  loto_2d = .true.\n  q_in_band_form = .true.\n/\n5\n0.500 0.500 0.500   20 ! L\n0.000 0.000 0.000   20 ! G\n0.500 0.000 0.500   20 ! X\n0.375 0.375 0.750   20 ! K\n0.000 0.000 0.000    1 ! G\n",c=["components"],u={title:"Phonon dispersion",keywords:["phonon dispersion calculation in Quantum Espresso","Raman spectra"]},d=void 0,h={unversionedId:"hands-on/phonon",id:"hands-on/phonon",title:"Phonon dispersion",description:"In Quantum Espresso, phonon dispersion is calculated using ph.x program, which",source:"@site/docs/hands-on/phonon.mdx",sourceDirName:"hands-on",slug:"/hands-on/phonon",permalink:"/espresso/hands-on/phonon",draft:!1,editUrl:"https://github.com/pranabdas/espresso/blob/main/docs/hands-on/phonon.mdx",tags:[],version:"current",frontMatter:{title:"Phonon dispersion",keywords:["phonon dispersion calculation in Quantum Espresso","Raman spectra"]},sidebar:"docs",previous:{title:"Fermi Surface",permalink:"/espresso/hands-on/fermi-surface"},next:{title:"Resources",permalink:"/espresso/resources"}},k={},f=[{value:"Resources",id:"resources",level:2}],g={toc:f},N="wrapper";function y(n){var a=n.components,u=(0,o.Z)(n,c);return(0,s.kt)(N,(0,t.Z)({},g,u,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"In Quantum Espresso, phonon dispersion is calculated using ",(0,s.kt)("inlineCode",{parentName:"p"},"ph.x")," program, which\nis implementation of ",(0,s.kt)("a",{parentName:"p",href:"https://doi.org/10.1103/RevModPhys.73.515"},"density functional perturbation theory (DFPT)"),"."),(0,s.kt)("p",null,"Here are the steps for calculating phonon dispersion:"),(0,s.kt)("p",null,"(1) perform SCF calculation using ",(0,s.kt)("inlineCode",{parentName:"p"},"pw.x")),(0,s.kt)(i.Z,{language:"bash",title:"src/GaAs-phonon/pw.scf.GaAs.in",showLineNumbers:!0,mdxType:"CodeBlock"},r),(0,s.kt)("p",null,"We perform the SCF calculation:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"mpirun -np 4 pw.x -i pw.scf.GaAs.in > pw.scf.GaAs.out\n")),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("ol",{parentName:"admonition"},(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Usually higher energy cutoff values are used for phonon calculation to get\nbetter accuracy.")),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"In case of two dimensional systems, use ",(0,s.kt)("inlineCode",{parentName:"p"},"assume_isolated = '2D'")," in the\n",(0,s.kt)("inlineCode",{parentName:"p"},"SYSTEM")," namelist to avoid negative or imaginary acoustic frequencies near\n",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"\u0393")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\Gamma")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"\u0393")))))," point. Read more ",(0,s.kt)("a",{parentName:"p",href:"https://doi.org/10.1103/PhysRevB.96.075448"},"here"),".")))),(0,s.kt)("p",null,"(2) calculate the dynamical matrix on a uniform mesh of q-points using ",(0,s.kt)("inlineCode",{parentName:"p"},"ph.x")),(0,s.kt)(i.Z,{language:"bash",title:"src/GaAs-phonon/ph.GaAs.in",showLineNumbers:!0,mdxType:"CodeBlock"},p),(0,s.kt)("p",null,"Run the calculation:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"mpirun -np 4 ph.x -i ph.GaAs.in > ph.GaAs.out\n")),(0,s.kt)("p",null,"The above calculation is computationally demanding. Our example calculation took\nabout a whole day on a 2.6 GHz quad core processor."),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"You can restart an interrupted ",(0,s.kt)("inlineCode",{parentName:"p"},"ph.x")," calculation with ",(0,s.kt)("inlineCode",{parentName:"p"},"recover = .true.")," in the\n",(0,s.kt)("inlineCode",{parentName:"p"},"INPUTPH")," namelist. You can cleanly exit an ongoing calculation by creating an\nempty file with name ",(0,s.kt)("inlineCode",{parentName:"p"},"{prefix}.EXIT"),".")),(0,s.kt)("p",null,"(3) perform inverse Fourier transform of the dynamical matrix to obtain inverse\nFourier components in real space using ",(0,s.kt)("inlineCode",{parentName:"p"},"q2r.x"),". Below is our input file:"),(0,s.kt)(i.Z,{language:"bash",title:"src/GaAs-phonon/q2r.GaAs.in",showLineNumbers:!0,mdxType:"CodeBlock"},l),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"mpirun -np 4 q2r.x -i q2r.GaAs.in > q2r.GaAs.out\n")),(0,s.kt)("p",null,"(4) Finally, perform Fourier transformation of the real space components to get\nthe dynamical matrix at any q by using ",(0,s.kt)("inlineCode",{parentName:"p"},"matdyn.x"),"."),(0,s.kt)(i.Z,{language:"bash",title:"src/GaAs-phonon/matdyn.GaAs.in",showLineNumbers:!0,mdxType:"CodeBlock"},m),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"mpirun -np 4 matdyn.x -i matdyn.GaAs.in > matdyn.GaAs.out\n")),(0,s.kt)("p",null,"We can now plot the phonon dispersion of GaAs:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="notebooks/GaAs-phonon.ipynb"',title:'"notebooks/GaAs-phonon.ipynb"'},"import numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nplt.rcParams[\"figure.dpi\"]=150\nplt.rcParams[\"figure.facecolor\"]=\"white\"\n\ndata = np.loadtxt(\"../src/GaAs-phonon/GaAs.freq.gp\")\n\nnbands = data.shape[1] - 1\nfor band in range(nbands):\n    plt.plot(data[:, 0], data[:, band], linewidth=1, alpha=0.5, color='k')\n# High symmetry k-points (check matdyn.GaAs.in)\nplt.axvline(x=data[0, 0], linewidth=0.5, color='k', alpha=0.5)\nplt.axvline(x=data[20, 0], linewidth=0.5, color='k', alpha=0.5)\nplt.axvline(x=data[40, 0], linewidth=0.5, color='k', alpha=0.5)\nplt.axvline(x=data[60, 0], linewidth=0.5, color='k', alpha=0.5)\nplt.xticks(ticks= [0, data[20, 0], data[40, 0], data[60, 0], data[-1, 0]], \\\n           labels=['L', '$\\Gamma$', 'X', 'U,K', '$\\Gamma$'])\nplt.ylabel(\"Frequency (cm$^{-1}$)\")\nplt.xlim(data[0, 0], data[-1, 0])\nplt.ylim(0, )\nplt.show()\n")),(0,s.kt)("picture",null,(0,s.kt)("source",{type:"image/webp",srcSet:e(1804).Z}),(0,s.kt)("img",{src:e(9624).Z,alt:"GaAs-phonon",width:"600px"})),(0,s.kt)("h2",{id:"resources"},"Resources"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/nguyen-group/QE-SSP"},"https://github.com/nguyen-group/QE-SSP"))))}y.isMDXComponent=!0},9624:function(n,a,e){a.Z=e.p+"assets/images/GaAs-phonon-c72a2335477e9d01eb3902649b18815e.png"},1804:function(n,a,e){a.Z=e.p+"assets/images/GaAs-phonon-c3ba40a21b539b8e25e519642369cedb.webp"}}]);